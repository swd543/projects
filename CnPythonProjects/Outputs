#include "libs/bugabox.cpp"		//custom library, contains some essential functions



struct inputBox
{
	int e[100],length;
	int C;
	void displayArray()
	{
		cout<<"\n";
		for(int i=0;i<length;i++)
		cout<<e[i]<<"\t";
	};
	void displayArray(int x,int b)
	{
		cout<<"\n";
		for(int i=0;i<length;i++)
			if(i==x || i==b)
				cout<<"*"<<e[i]<<"\t";
			else
				cout<<e[i]<<"\t";
	};

	int getArray()
	{
		length=0;
		cout<<"\nEnter the elements one by one, and press <ENTER> after each entry. -3296 to exit loop.\n";
	
		do	cin>>e[length++];
		while(e[length-1]!=-3296);
	
		e[length--]=0;
		return length;
	};
	int bubbleSort()
	{		
		int i,j,tmp=0,c=0;
		cout<<"\nATTEMPTING BUBBLE SORT,\n";
		for(i=0;i<length;i++)
		{
			for(j=0;j<length-i-1;j++)
			{
				if(e[j+1]<e[j])
				{
					displayArray(j,j+1);
					tmp=e[j+1];
					e[j+1]=e[j];
					e[j]=tmp;
					tmp=0;
					c++;
				}
			}
		}
		displayArray();
		cout<<"\nTIME COMPLEXITY : "<<c<<" Iterations.\n";
		return c;
	};
	int selectionSort()
	{
		int i,j,tmp=0,c=0;
		cout<<"\nATTEMPTING SELECTION SORT,\n";
		for(i=0;i<length-1;i++)
		{
			for(j=i+1;j<length;j++)
			{
				if(e[j]<e[i])
				{	
					displayArray(j,i);
					tmp=e[i];
					e[i]=e[j];
					e[j]=tmp;
					tmp=0;
					c++;
				}
			}
		}
		displayArray();
		cout<<"\nTIME COMPLEXITY : "<<c<<" Iterations.\n";
		return c;
	};
	int insertionSort()
	{
		int i,j,temp=0,c=0;
		cout<<"\nATTEMPTING INSERTION SORT,\n";
		
		for (int i = 0; i < length; i++)
		{
			j = i;
			
			while (j > 0 && e[j] < e[j-1])
			{
				displayArray(j,j-1);
				temp = e[j];
				e[j] = e[j-1];
				e[j-1] = temp;
				j--,c++;
			 }
		}
		displayArray();
		cout<<"\nTIME COMPLEXITY : "<<c<<" Iterations.\n";
		return c;
	};

	
	int quickie(int left, int right)
	{
	      int i = left, j = right;
	      int tmp;
	      int pivot = e[(left + right) / 2];
	 
	      /* partition */
		while (i <= j)
		{
	            while (e[i] < pivot)
	            	i++;
	            while (e[j] > pivot)
	            	j--;
			if (i <= j)
			{
				displayArray(i,j);
		            	tmp = e[i];
		            	e[i] = e[j];
		            	e[j] = tmp;
		            	i++;
		            	j--,C++;
			}
		};
	 
	      /* recursion */
		if (left < j)
			quickie(left, j);
		if (i < right)
			quickie(i, right);
		return C;
	};
	void quickSort()
	{
		C=0;
		cout<<"\nATTEMPTING QUICK SORT,\n";
		quickie(0,length-1);
		displayArray();
		cout<<"\nTIME COMPLEXITY : "<<C<<" Iterations.\n";
	}			
};


int main()
{
	clear();
	cout<<"\nThis program uses different sorting techniques and compares the efficiency of each algorithm\n\n";
	
	inputBox a,b;
	a.getArray();
	b=a;
	b.bubbleSort();
	b=a;
	b.selectionSort();
	b=a;
	b.insertionSort();
	b=a;
	b.quickSort();
	
}


buga@Buga-geekbench:~/programs$ gedit buga.cpp
buga@Buga-geekbench:~/programs$ g++ buga.cpp
buga@Buga-geekbench:~/programs$ ./a.out


This program uses different sorting techniques and compares the efficiency of each algorithm


Enter the elements one by one, and press <ENTER> after each entry. -3296 to exit loop.
94
62
55
59
27
42
34
82
2
39
-3296

ATTEMPTING BUBBLE SORT,

*94	*62	55	59	27	42	34	82	2	39	
62	*94	*55	59	27	42	34	82	2	39	
62	55	*94	*59	27	42	34	82	2	39	
62	55	59	*94	*27	42	34	82	2	39	
62	55	59	27	*94	*42	34	82	2	39	
62	55	59	27	42	*94	*34	82	2	39	
62	55	59	27	42	34	*94	*82	2	39	
62	55	59	27	42	34	82	*94	*2	39	
62	55	59	27	42	34	82	2	*94	*39	
*62	*55	59	27	42	34	82	2	39	94	
55	*62	*59	27	42	34	82	2	39	94	
55	59	*62	*27	42	34	82	2	39	94	
55	59	27	*62	*42	34	82	2	39	94	
55	59	27	42	*62	*34	82	2	39	94	
55	59	27	42	34	62	*82	*2	39	94	
55	59	27	42	34	62	2	*82	*39	94	
55	*59	*27	42	34	62	2	39	82	94	
55	27	*59	*42	34	62	2	39	82	94	
55	27	42	*59	*34	62	2	39	82	94	
55	27	42	34	59	*62	*2	39	82	94	
55	27	42	34	59	2	*62	*39	82	94	
*55	*27	42	34	59	2	39	62	82	94	
27	*55	*42	34	59	2	39	62	82	94	
27	42	*55	*34	59	2	39	62	82	94	
27	42	34	55	*59	*2	39	62	82	94	
27	42	34	55	2	*59	*39	62	82	94	
27	*42	*34	55	2	39	59	62	82	94	
27	34	42	*55	*2	39	59	62	82	94	
27	34	42	2	*55	*39	59	62	82	94	
27	34	*42	*2	39	55	59	62	82	94	
27	34	2	*42	*39	55	59	62	82	94	
27	*34	*2	39	42	55	59	62	82	94	
*27	*2	34	39	42	55	59	62	82	94	
2	27	34	39	42	55	59	62	82	94	
TIME COMPLEXITY : 33 Iterations.

ATTEMPTING SELECTION SORT,

*94	*62	55	59	27	42	34	82	2	39	
*62	94	*55	59	27	42	34	82	2	39	
*55	94	62	59	*27	42	34	82	2	39	
*27	94	62	59	55	42	34	82	*2	39	
2	*94	*62	59	55	42	34	82	27	39	
2	*62	94	*59	55	42	34	82	27	39	
2	*59	94	62	*55	42	34	82	27	39	
2	*55	94	62	59	*42	34	82	27	39	
2	*42	94	62	59	55	*34	82	27	39	
2	*34	94	62	59	55	42	82	*27	39	
2	27	*94	*62	59	55	42	82	34	39	
2	27	*62	94	*59	55	42	82	34	39	
2	27	*59	94	62	*55	42	82	34	39	
2	27	*55	94	62	59	*42	82	34	39	
2	27	*42	94	62	59	55	82	*34	39	
2	27	34	*94	*62	59	55	82	42	39	
2	27	34	*62	94	*59	55	82	42	39	
2	27	34	*59	94	62	*55	82	42	39	
2	27	34	*55	94	62	59	82	*42	39	
2	27	34	*42	94	62	59	82	55	*39	
2	27	34	39	*94	*62	59	82	55	42	
2	27	34	39	*62	94	*59	82	55	42	
2	27	34	39	*59	94	62	82	*55	42	
2	27	34	39	*55	94	62	82	59	*42	
2	27	34	39	42	*94	*62	82	59	55	
2	27	34	39	42	*62	94	82	*59	55	
2	27	34	39	42	*59	94	82	62	*55	
2	27	34	39	42	55	*94	*82	62	59	
2	27	34	39	42	55	*82	94	*62	59	
2	27	34	39	42	55	*62	94	82	*59	
2	27	34	39	42	55	59	*94	*82	62	
2	27	34	39	42	55	59	*82	94	*62	
2	27	34	39	42	55	59	62	*94	*82	
2	27	34	39	42	55	59	62	82	94	
TIME COMPLEXITY : 33 Iterations.

ATTEMPTING INSERTION SORT,

*94	*62	55	59	27	42	34	82	2	39	
62	*94	*55	59	27	42	34	82	2	39	
*62	*55	94	59	27	42	34	82	2	39	
55	62	*94	*59	27	42	34	82	2	39	
55	*62	*59	94	27	42	34	82	2	39	
55	59	62	*94	*27	42	34	82	2	39	
55	59	*62	*27	94	42	34	82	2	39	
55	*59	*27	62	94	42	34	82	2	39	
*55	*27	59	62	94	42	34	82	2	39	
27	55	59	62	*94	*42	34	82	2	39	
27	55	59	*62	*42	94	34	82	2	39	
27	55	*59	*42	62	94	34	82	2	39	
27	*55	*42	59	62	94	34	82	2	39	
27	42	55	59	62	*94	*34	82	2	39	
27	42	55	59	*62	*34	94	82	2	39	
27	42	55	*59	*34	62	94	82	2	39	
27	42	*55	*34	59	62	94	82	2	39	
27	*42	*34	55	59	62	94	82	2	39	
27	34	42	55	59	62	*94	*82	2	39	
27	34	42	55	59	62	82	*94	*2	39	
27	34	42	55	59	62	*82	*2	94	39	
27	34	42	55	59	*62	*2	82	94	39	
27	34	42	55	*59	*2	62	82	94	39	
27	34	42	*55	*2	59	62	82	94	39	
27	34	*42	*2	55	59	62	82	94	39	
27	*34	*2	42	55	59	62	82	94	39	
*27	*2	34	42	55	59	62	82	94	39	
2	27	34	42	55	59	62	82	*94	*39	
2	27	34	42	55	59	62	*82	*39	94	
2	27	34	42	55	59	*62	*39	82	94	
2	27	34	42	55	*59	*39	62	82	94	
2	27	34	42	*55	*39	59	62	82	94	
2	27	34	*42	*39	55	59	62	82	94	
2	27	34	39	42	55	59	62	82	94	
TIME COMPLEXITY : 33 Iterations.

ATTEMPTING QUICK SORT,

*94	62	55	59	27	42	34	82	*2	39	
2	*62	55	59	*27	42	34	82	94	39	
*2	27	55	59	62	42	34	82	94	39	
2	27	*55	59	62	42	34	82	94	*39	
2	27	39	*59	62	42	*34	82	94	55	
2	27	39	34	*62	*42	59	82	94	55	
2	27	*39	*34	42	62	59	82	94	55	
2	27	34	*39	42	62	59	82	94	55	
2	27	34	39	42	62	59	*82	94	*55	
2	27	34	39	42	*62	59	*55	94	82	
2	27	34	39	42	55	*59	62	94	82	
2	27	34	39	42	55	59	62	*94	*82	
2	27	34	39	42	55	59	62	82	94	
TIME COMPLEXITY : 12 Iterations.
	
24	36	38	*63	93	97	85	75	68	*44	
24	36	38	44	*93	97	*85	75	68	63	
24	36	38	44	*85	97	93	*75	68	63	
24	36	38	44	*75	97	93	85	*68	63	
24	36	38	44	*68	97	93	85	75	*63	
24	36	38	44	63	*97	*93	85	75	68	
24	36	38	44	63	*93	97	*85	75	68	
24	36	38	44	63	*85	97	93	*75	68	
24	36	38	44	63	*75	97	93	85	*68	
24	36	38	44	63	68	*97	*93	85	75	
24	36	38	44	63	68	*93	97	*85	75	
24	36	38	44	63	68	*85	97	93	*75	
24	36	38	44	63	68	75	*97	*93	85	
24	36	38	44	63	68	75	*93	97	*85	
24	36	38	44	63	68	75	85	*97	*93	
24	36	38	44	63	68	75	85	93	97	
TIME COMPLEXITY : 29 Iterations.

ATTEMPTING INSERTION SORT,

*85	*24	93	68	75	97	38	63	44	36	
24	85	*93	*68	75	97	38	63	44	36	
24	*85	*68	93	75	97	38	63	44	36	
24	68	85	*93	*75	97	38	63	44	36	
24	68	*85	*75	93	97	38	63	44	36	
24	68	75	85	93	*97	*38	63	44	36	
24	68	75	85	*93	*38	97	63	44	36	
24	68	75	*85	*38	93	97	63	44	36	
24	68	*75	*38	85	93	97	63	44	36	
24	*68	*38	75	85	93	97	63	44	36	
24	38	68	75	85	93	*97	*63	44	36	
24	38	68	75	85	*93	*63	97	44	36	
24	38	68	75	*85	*63	93	97	44	36	
24	38	68	*75	*63	85	93	97	44	36	
24	38	*68	*63	75	85	93	97	44	36	
24	38	63	68	75	85	93	*97	*44	36	
24	38	63	68	75	85	*93	*44	97	36	
24	38	63	68	75	*85	*44	93	97	36	
24	38	63	68	*75	*44	85	93	97	36	
24	38	63	*68	*44	75	85	93	97	36	
24	38	*63	*44	68	75	85	93	97	36	
24	38	44	63	68	75	85	93	*97	*36	
24	38	44	63	68	75	85	*93	*36	97	
24	38	44	63	68	75	*85	*36	93	97	
24	38	44	63	68	*75	*36	85	93	97	
24	38	44	63	*68	*36	75	85	93	97	
24	38	44	*63	*36	68	75	85	93	97	
24	38	*44	*36	63	68	75	85	93	97	
24	*38	*36	44	63	68	75	85	93	97	
24	36	38	44	63	68	75	85	93	97	
TIME COMPLEXITY : 29 Iterations.

ATTEMPTING QUICK SORT,

*85	24	93	68	75	97	38	63	44	*36	
36	24	*93	68	75	97	38	63	*44	85	
36	24	44	68	*75	97	38	*63	93	85	
36	24	44	68	63	*97	*38	75	93	85	
36	24	*44	68	63	*38	97	75	93	85	
*36	*24	38	68	63	44	97	75	93	85	
24	*36	38	68	63	44	97	75	93	85	
24	36	38	*68	63	*44	97	75	93	85	
24	36	38	44	*63	68	97	75	93	85	
24	36	38	44	63	68	*97	*75	93	85	
24	36	38	44	63	68	75	*97	93	*85	
24	36	38	44	63	68	75	85	*93	97	
24	36	38	44	63	68	75	85	93	97	
TIME COMPLEXITY : 12 Iterations.
buga@Buga-geekbench:~/programs$ 


